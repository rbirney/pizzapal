{"version":3,"sources":["containers/Authenticate/Authenticate.js"],"names":["Authenticate","props","auth","useContext","AuthContext","useState","isLoginMode","setIsLoginMode","error","errorMessage","errorState","setErrorState","switchModeHandler","prevMode","setAuthDetailsState","details","name","email","password","setValidationState","rules","id","message","required","valid","formValid","document","getElementById","reset","authDetailsState","validationState","address","messageState","setMessageState","validate","value","inputIdentifier","validation","inputRule","findIndex","input","trim","test","msgState","formIsValid","i","formChangedHandler","event","authDetails","target","trimmedPassword","disabled","signupBtnColor","loginBtnColor","authForm","onClear","color","as","textAlign","Input","autoComplete","label","placeholder","onChange","type","onClick","axios","post","then","response","login","data","userId","token","history","push","catch","errorMsg","Row","centered","Column","width","Group","widths","size","Or"],"mappings":"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","file":"static/js/5.b8f99beb.chunk.js","sourcesContent":["import React, { useState, useContext } from \"react\";\r\nimport { Grid, Form, Header, Segment, Button } from \"semantic-ui-react\";\r\n\r\nimport ErrorModal from \"../../components/Feedback/ErrorModal/ErrorModal\";\r\nimport AuthContext from \"../../context/auth-context\";\r\nimport axios from '../../axios-orders';\r\n\r\nconst Authenticate = (props) => {\r\n\r\n  const auth = useContext(AuthContext);\r\n\r\n  const [isLoginMode, setIsLoginMode] = useState(false);\r\n\r\n  const [errorState, setErrorState] = useState({\r\n    error: false,\r\n    errorMessage: null,\r\n  });\r\n\r\n  const switchModeHandler = () => {\r\n    setIsLoginMode((prevMode) => !prevMode);\r\n    setAuthDetailsState({\r\n      details: {\r\n        name: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n      },\r\n    });\r\n    setValidationState({\r\n      rules: [\r\n        {\r\n          id: \"form-input-name\",\r\n          message:\r\n            \"Please enter your name (letters and spaces only, min length 2)\",\r\n          required: true,\r\n          valid: false,\r\n        },\r\n        {\r\n          id: \"form-input-email\",\r\n          message:\r\n            \"Please enter a valid email address (something@something.something)\",\r\n          required: true,\r\n          valid: false,\r\n        },\r\n        {\r\n          id: \"form-input-password\",\r\n          message:\r\n            \"Please enter a password (letters and numbers only, min length 6)\",\r\n          required: true,\r\n          valid: false,\r\n        },\r\n      ],\r\n      formValid: false,\r\n    });\r\n    document.getElementById(\"form\").reset();\r\n  };\r\n\r\n  const [authDetailsState, setAuthDetailsState] = useState({\r\n    details: {\r\n      name: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    },\r\n  });\r\n\r\n  const [validationState, setValidationState] = useState({\r\n    rules: [\r\n      {\r\n        id: \"form-input-name\",\r\n        message:\r\n          \"Please enter your name (letters and spaces only, min length 2)\",\r\n        required: true,\r\n        valid: false,\r\n      },\r\n      {\r\n        id: \"form-input-email\",\r\n        message:\r\n          \"Please enter a valid email address (something@something.something)\",\r\n        required: true,\r\n        valid: false,\r\n      },\r\n      {\r\n        id: \"form-input-password\",\r\n        message:\r\n          \"Please enter a password (letters and numbers only, min length 6)\",\r\n        required: true,\r\n        valid: false,\r\n      },\r\n    ],\r\n    formValid: false,\r\n  });\r\n\r\n  const [messageState, setMessageState] = useState({\r\n    name: null,\r\n    email: null,\r\n    address: null,\r\n  });\r\n\r\n  const validate = (value, inputIdentifier) => {\r\n    // copy the validation state\r\n    const validation = { ...validationState };\r\n\r\n    // find the rule for this input\r\n    const inputRule = validation.rules.findIndex(\r\n      (input) => input.id === inputIdentifier\r\n    );\r\n\r\n    let message = null;\r\n\r\n    // check if it is required and also empty\r\n    if (validation.rules[inputRule].required && value.trim() === \"\") {\r\n      // get the error message and set valid to false\r\n      message = validation.rules[inputRule].message;\r\n      validation.rules[inputRule].valid = false;\r\n    } else if (inputIdentifier === \"form-input-email\") {\r\n      //check for a valid email\r\n\r\n      let pattern = /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/;\r\n      let validEmail = pattern.test(value);\r\n\r\n      if (validEmail) {\r\n        validation.rules[inputRule].valid = true;\r\n      } else {\r\n        validation.rules[inputRule].valid = false;\r\n        message = validation.rules[inputRule].message;\r\n      }\r\n    } else if (inputIdentifier === \"form-input-password\") {\r\n      //check for a valid password, letters and numbers only, 6 characters min\r\n\r\n      let pattern = /^[A-Za-z0-9\\s]{6,}$/;\r\n      let validPassword = pattern.test(value);\r\n\r\n      if (validPassword) {\r\n        validation.rules[inputRule].valid = true;\r\n      } else {\r\n        validation.rules[inputRule].valid = false;\r\n        message = validation.rules[inputRule].message;\r\n      }\r\n    } else if (\r\n      validation.rules[inputRule].required &&\r\n      inputIdentifier === \"form-input-name\"\r\n    ) {\r\n      //check for a valid name (letters and spaces only)\r\n\r\n      let pattern = /^[A-Za-z\\s]{2,30}$/;\r\n      let validName = pattern.test(value);\r\n\r\n      if (validName) {\r\n        validation.rules[inputRule].valid = true;\r\n      } else {\r\n        validation.rules[inputRule].valid = false;\r\n        message = validation.rules[inputRule].message;\r\n      }\r\n    } else {\r\n      // otherwise reset the message and set valid back to true\r\n      message = null;\r\n      validation.rules[inputRule].valid = true;\r\n    }\r\n\r\n    let msgState = { ...messageState };\r\n\r\n    switch (inputIdentifier) {\r\n      case \"form-input-name\":\r\n        msgState.name = message;\r\n        break;\r\n      case \"form-input-email\":\r\n        msgState.email = message;\r\n        break;\r\n      case \"form-input-password\":\r\n        msgState.password = message;\r\n        break;\r\n      default:\r\n      // code block\r\n    }\r\n\r\n    setMessageState({ ...msgState });\r\n\r\n    // check if the whole form is valid\r\n    let formIsValid = true;\r\n\r\n    for (let i in validation.rules) {\r\n      if (isLoginMode && i == 0) {\r\n        continue;\r\n      }\r\n\r\n      if (!validation.rules[i].valid) {\r\n        formIsValid = false;\r\n      }\r\n    }\r\n\r\n    // update state\r\n    setValidationState({ rules: validation.rules, formValid: formIsValid });\r\n  };\r\n\r\n  const formChangedHandler = (event, inputIdentifier) => {\r\n    let authDetails = authDetailsState.details;\r\n\r\n    switch (inputIdentifier) {\r\n      case \"form-input-name\":\r\n        authDetails.name = event.target.value;\r\n        validate(event.target.value, inputIdentifier);\r\n        break;\r\n      case \"form-input-email\":\r\n        authDetails.email = event.target.value;\r\n        validate(event.target.value, inputIdentifier);\r\n        break;\r\n      case \"form-input-password\":\r\n        let password = event.target.value;\r\n        let trimmedPassword = password.trim();\r\n        authDetails.password = trimmedPassword;\r\n        validate(trimmedPassword, inputIdentifier);\r\n        break;\r\n      default:\r\n      // code block\r\n    }\r\n\r\n    setAuthDetailsState({ details: authDetails });\r\n  };\r\n\r\n  const errorHandler = () => {\r\n    setErrorState({\r\n      error: false,\r\n      errorMessage: null,\r\n    });\r\n  };\r\n\r\n  const signupHandler = () => {\r\n    axios\r\n      .post(\"/signup\", authDetailsState.details)\r\n      .then((response) => {\r\n        auth.login(response.data.userId, response.data.token);\r\n        props.history.push(\"/\");\r\n      })\r\n      .catch((error) => {\r\n        let errorMsg = \"\";\r\n        if (error.response) {\r\n          errorMsg = error.response.data.message;\r\n        } else {\r\n          errorMsg = \"Something went wrong - signup failed\";\r\n        }\r\n        setErrorState({ error: true, errorMessage: errorMsg });\r\n      });\r\n  };\r\n\r\n  const loginHandler = () => {\r\n    axios\r\n      .post(\"/login\", authDetailsState.details)\r\n      .then((response) => {\r\n        auth.login(response.data.userId, response.data.token);\r\n        props.history.push(\"/\");\r\n      })\r\n      .catch((error) => {\r\n        let errorMsg = \"\";\r\n        if (error.response) {\r\n          errorMsg = error.response.data.message;\r\n        } else {\r\n          errorMsg = \"Something went wrong - login failed\";\r\n        }\r\n        setErrorState({ error: true, errorMessage: errorMsg });\r\n      });\r\n  };\r\n\r\n  let disabled = !validationState.formValid;\r\n\r\n  let signupBtnColor = \"grey\";\r\n  let loginBtnColor = \"grey\";\r\n\r\n  let authForm = null;\r\n\r\n  if (errorState.error) {\r\n    authForm = (\r\n      <ErrorModal error={errorState.errorMessage} onClear={errorHandler} />\r\n    );\r\n  } else {\r\n    if (isLoginMode) {\r\n      authForm = (\r\n        <Segment color=\"red\">\r\n          <Header as=\"h2\" textAlign=\"center\" color=\"red\">\r\n            Already registered? Log In!\r\n          </Header>\r\n          <Form id=\"form\">\r\n            <Form.Input\r\n              error={messageState.email}\r\n              autoComplete=\"off\"\r\n              required\r\n              label=\"Email\"\r\n              placeholder=\"Email e.g. username@mail.com\"\r\n              id=\"form-input-email\"\r\n              onChange={(event) =>\r\n                formChangedHandler(event, \"form-input-email\")\r\n              }\r\n            />\r\n            <Form.Input\r\n              error={messageState.password}\r\n              type=\"password\"\r\n              autoComplete=\"off\"\r\n              required\r\n              label=\"Password\"\r\n              placeholder=\"Password\"\r\n              id=\"form-input-password\"\r\n              onChange={(event) =>\r\n                formChangedHandler(event, \"form-input-password\")\r\n              }\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              color=\"green\"\r\n              disabled={disabled}\r\n              onClick={loginHandler}\r\n            >\r\n              Log In\r\n            </Button>\r\n          </Form>\r\n        </Segment>\r\n      );\r\n      loginBtnColor = \"red\";\r\n    } else {\r\n      authForm = (\r\n        <Segment color=\"red\">\r\n          <Header as=\"h2\" textAlign=\"center\" color=\"red\">\r\n            First time here? Sign Up!\r\n          </Header>\r\n          <Form id=\"form\">\r\n            <Form.Input\r\n              error={messageState.email}\r\n              autoComplete=\"off\"\r\n              required\r\n              label=\"Email\"\r\n              placeholder=\"Email e.g. username@mail.com\"\r\n              id=\"form-input-email\"\r\n              onChange={(event) =>\r\n                formChangedHandler(event, \"form-input-email\")\r\n              }\r\n            />\r\n            <Form.Input\r\n              error={messageState.password}\r\n              type=\"password\"\r\n              autoComplete=\"off\"\r\n              required\r\n              label=\"Password\"\r\n              placeholder=\"Password\"\r\n              id=\"form-input-password\"\r\n              onChange={(event) =>\r\n                formChangedHandler(event, \"form-input-password\")\r\n              }\r\n            />\r\n            <Form.Input\r\n              error={messageState.name}\r\n              autoComplete=\"off\"\r\n              required\r\n              label=\"Name\"\r\n              placeholder=\"Name\"\r\n              id=\"form-input-name\"\r\n              onChange={(event) => formChangedHandler(event, \"form-input-name\")}\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              color=\"green\"\r\n              disabled={disabled}\r\n              onClick={signupHandler}\r\n            >\r\n              Sign Up\r\n            </Button>\r\n          </Form>\r\n        </Segment>\r\n      );\r\n      signupBtnColor = \"red\";\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Row centered>\r\n        <Grid.Column width={10}>\r\n          <Button.Group widths=\"2\">\r\n            <Button\r\n              size=\"large\"\r\n              color={signupBtnColor}\r\n              onClick={switchModeHandler}\r\n            >\r\n              Sign Up\r\n            </Button>\r\n            <Button.Or />\r\n            <Button\r\n              size=\"large\"\r\n              color={loginBtnColor}\r\n              onClick={switchModeHandler}\r\n            >\r\n              Log In\r\n            </Button>\r\n          </Button.Group>\r\n          {authForm}\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Authenticate;\r\n"],"sourceRoot":""}