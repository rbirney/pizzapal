{"version":3,"sources":["../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","containers/PlaceOrder/PlaceOrder.js"],"names":["getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","test","byteToHex","i","push","toString","substr","stringify","arr","offset","arguments","length","undefined","toLowerCase","TypeError","v4","options","buf","rnds","random","withRouter","props","auth","useContext","AuthContext","useState","totalPrice","location","state","order","chosenToppings","orderState","error","errorMessage","errorState","setErrorState","details","name","phone","method","address","customerState","setCustomerState","rules","id","message","required","valid","formValid","validationState","setValidationState","messageState","setMessageState","value","inputIdentifier","inputType","validation","inputRule","findIndex","input","trim","msgState","formIsValid","formChangedHandler","event","customerDetails","target","textContent","disabled","orderForm","ErrorModal","onClear","Grid","Row","columns","Column","width","Segment","color","Header","as","textAlign","OrderSummary","menu","toppings","price","Button","onClick","history","pathname","Form","Input","label","placeholder","onChange","Field","control","Select","key","text","fluid","type","uuidv4","orderDate","Date","day","getDay","month","getMonth","formattedDate","getDate","getFullYear","date","userId","axios","post","headers","Authorization","token","then","response","catch","errorMsg","data","Fragment"],"mappings":"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","file":"static/js/7.bbcd5798.chunk.js","sourcesContent":["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import React, { useState, useContext } from \"react\";\r\nimport { Grid, Form, Header, Segment, Select, Button } from \"semantic-ui-react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport axios from \"../../axios-orders\";\r\nimport AuthContext from \"../../context/auth-context\";\r\n\r\nimport OrderSummary from \"../../components/Order/Checkout/OrderSummary/OrderSummary\";\r\nimport ErrorModal from \"../../components/Feedback/ErrorModal/ErrorModal\";\r\n\r\nconst PlaceOrder = (props) => {\r\n\r\n  const auth = useContext(AuthContext);\r\n\r\n  // CREATE STATES\r\n  const [orderState, setOrderState] = useState({\r\n    totalPrice: props.location.state.order.totalPrice,\r\n    chosenToppings: props.location.state.order.chosenToppings,\r\n  });\r\n\r\n  const [errorState, setErrorState] = useState({\r\n    error: false,\r\n    errorMessage: null,\r\n  });\r\n\r\n  const [customerState, setCustomerState] = useState({\r\n    details: {\r\n      name: \"\",\r\n      phone: \"\",\r\n      method: \"\",\r\n      address: \"\",\r\n    },\r\n  });\r\n\r\n  const [validationState, setValidationState] = useState({\r\n    rules: [\r\n      {\r\n        id: \"form-input-name\",\r\n        message:\r\n          \"Please enter your name (letters and spaces only, min length 2)\",\r\n        required: true,\r\n        valid: false,\r\n      },\r\n      {\r\n        id: \"form-input-phone\",\r\n        message: \"Please enter your phone number (area code and number)\",\r\n        required: true,\r\n        valid: false,\r\n      },\r\n      {\r\n        id: \"form-input-method\",\r\n        message: \"Please choose collection or delivery\",\r\n        required: true,\r\n        valid: false,\r\n      },\r\n      {\r\n        id: \"form-input-address\",\r\n        message: \"Please enter your delivery address (house number and street)\",\r\n        required: false,\r\n        valid: true,\r\n      },\r\n    ],\r\n    formValid: false,\r\n  });\r\n\r\n  const [messageState, setMessageState] = useState({\r\n    name: null,\r\n    phone: null,\r\n    method: null,\r\n    address: null,\r\n  });\r\n\r\n  // CANCEL (GO BACK) HANDLER\r\n  const cancelHandler = () => {\r\n    props.history.push({\r\n      pathname: \"/\",\r\n      state: {\r\n        order: orderState,\r\n      },\r\n    });\r\n  };\r\n\r\n  // VALIDATE FUNCTION\r\n  const validate = (value, inputIdentifier, inputType) => {\r\n    // copy the validation state\r\n    const validation = { ...validationState };\r\n\r\n    // find the rule for this input\r\n    const inputRule = validation.rules.findIndex(\r\n      (input) => input.id === inputIdentifier\r\n    );\r\n\r\n    let message = null;\r\n\r\n    // check if it is required and also empty (for inputs only)\r\n    if (\r\n      validation.rules[inputRule].required &&\r\n      inputType === \"input\" &&\r\n      value.trim() === \"\"\r\n    ) {\r\n      // get the error message and set valid to false\r\n      message = validation.rules[inputRule].message;\r\n      validation.rules[inputRule].valid = false;\r\n    } else if (inputIdentifier === \"form-input-phone\") {\r\n      //check for a valid phone number\r\n\r\n      let pattern = /^[+]?[(]?[0-9]{3,5}[)]?[-\\s.]?[0-9]{6,7}$/;\r\n      let validNum = pattern.test(value);\r\n\r\n      if (validNum) {\r\n        validation.rules[inputRule].valid = true;\r\n      } else {\r\n        validation.rules[inputRule].valid = false;\r\n        message = validation.rules[inputRule].message;\r\n      }\r\n    } else if (inputIdentifier === \"form-input-name\") {\r\n      //check for a valid name (letters and spaces only)\r\n\r\n      let pattern = /^[A-Za-z\\s]{2,30}$/;\r\n      let validName = pattern.test(value);\r\n\r\n      if (validName) {\r\n        validation.rules[inputRule].valid = true;\r\n      } else {\r\n        validation.rules[inputRule].valid = false;\r\n        message = validation.rules[inputRule].message;\r\n      }\r\n    } else if (value === \"Delivery\") {\r\n      //set address to required\r\n      validation.rules[inputRule].valid = true;\r\n      validation.rules[3].valid = false;\r\n      validation.rules[3].required = true;\r\n    } else if (value === \"Collection\") {\r\n      //set address to not required\r\n      validation.rules[inputRule].valid = true;\r\n      validation.rules[3].required = false;\r\n      validation.rules[3].valid = true;\r\n    } else if (\r\n      validation.rules[inputRule].required &&\r\n      inputIdentifier === \"form-input-address\"\r\n    ) {\r\n      //check for a valid address (alphanumeric plus some special characters)\r\n\r\n      let pattern = /^[#.0-9a-zA-Z\\s,-]{2,50}$/;\r\n      let validAddress = pattern.test(value);\r\n\r\n      if (validAddress) {\r\n        validation.rules[inputRule].valid = true;\r\n      } else {\r\n        validation.rules[inputRule].valid = false;\r\n        message = validation.rules[inputRule].message;\r\n      }\r\n    } else {\r\n      // otherwise reset the message and set valid back to true\r\n      message = null;\r\n      validation.rules[inputRule].valid = true;\r\n    }\r\n\r\n    let msgState = { ...messageState };\r\n\r\n    switch (inputIdentifier) {\r\n      case \"form-input-name\":\r\n        msgState.name = message;\r\n        break;\r\n      case \"form-input-phone\":\r\n        msgState.phone = message;\r\n        break;\r\n      case \"form-input-method\":\r\n        msgState.method = message;\r\n        break;\r\n      case \"form-input-address\":\r\n        msgState.address = message;\r\n        break;\r\n      default:\r\n      // code block\r\n    }\r\n\r\n    setMessageState({ ...msgState });\r\n\r\n    // check if the whole form is valid\r\n    let formIsValid = true;\r\n\r\n    for (let i in validation.rules) {\r\n      if (!validation.rules[i].valid) {\r\n        formIsValid = false;\r\n      }\r\n    }\r\n\r\n    // update state\r\n    setValidationState({ rules: validation.rules, formValid: formIsValid });\r\n  };\r\n\r\n  // FORM CHANGED HANDLER\r\n  const formChangedHandler = (event, inputIdentifier, inputType) => {\r\n    let customerDetails = customerState.details;\r\n\r\n    switch (inputIdentifier) {\r\n      case \"form-input-name\":\r\n        customerDetails.name = event.target.value;\r\n        validate(event.target.value, inputIdentifier, inputType);\r\n        break;\r\n      case \"form-input-phone\":\r\n        customerDetails.phone = event.target.value;\r\n        validate(event.target.value, inputIdentifier, inputType);\r\n        break;\r\n      case \"form-input-method\":\r\n        customerDetails.method = event.target.textContent;\r\n        validate(event.target.textContent, inputIdentifier, inputType);\r\n        break;\r\n      case \"form-input-address\":\r\n        customerDetails.address = event.target.value;\r\n        validate(event.target.value, inputIdentifier, inputType);\r\n        break;\r\n      default:\r\n      // code block\r\n    }\r\n\r\n    setCustomerState({ details: customerDetails });\r\n  };\r\n\r\n  // DISABLE/ENABLE FORM SUBMIT BUTTON\r\n\r\n  let disabled = !validationState.formValid;\r\n\r\n  // CHECKOUT HANDLER\r\n\r\n  const checkoutHandler = () => {\r\n    // get order from orderState\r\n    let order = orderState;\r\n\r\n    // add unique id\r\n    order.id = uuidv4();\r\n\r\n    // create formatted date\r\n    let orderDate = new Date();\r\n\r\n    const months = [\r\n      \"Jan\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\",\r\n    ];\r\n    const days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n\r\n    let dayNum = orderDate.getDay();\r\n    let day = days[dayNum];\r\n\r\n    let monthNum = orderDate.getMonth();\r\n    let month = months[monthNum];\r\n\r\n    let date = orderDate.getDate();\r\n    let year = orderDate.getFullYear();\r\n\r\n    // saves date in the format \"Fri 19 Mar 2021\"\r\n    let formattedDate = day + \" \" + date + \" \" + month + \" \" + year;\r\n\r\n    // add formattedDate to order\r\n    order.date = formattedDate;\r\n\r\n    // add customer details to order\r\n    order.details = customerState.details;\r\n\r\n    order.userId = auth.userId;\r\n\r\n    axios\r\n      .post(\"/checkout\", order,{\r\n        headers: { Authorization: \"Bearer \" + auth.token}\r\n      })\r\n      .then((response) => {\r\n        props.history.push(\"/order-success\");\r\n      })\r\n      .catch((error) => {\r\n        let errorMsg = \"\";\r\n        if (error.response) {\r\n          errorMsg = error.response.data.message;\r\n        } else {\r\n          errorMsg = \"There was a problem creating your order\";\r\n        }\r\n        setErrorState({ error: true, errorMessage: errorMsg });\r\n      });\r\n  };\r\n\r\n  // ERROR HANDLER\r\n\r\n  const errorHandler = () => {\r\n    setErrorState({\r\n      error: false,\r\n      errorMessage: null,\r\n    });\r\n  };\r\n\r\n  // DISPLAY ERROR MODAL\r\n\r\n  let orderForm = null;\r\n\r\n  if (errorState.error) {\r\n    orderForm = (\r\n      <ErrorModal error={errorState.errorMessage} onClear={errorHandler} />\r\n    );\r\n  } else {\r\n    orderForm = (\r\n      <Grid>\r\n        <Grid.Row columns={2}>\r\n          <Grid.Column width={6}>\r\n            <Segment color=\"red\">\r\n              <Header as=\"h2\" textAlign=\"center\" color=\"red\">\r\n                Confirm your order:\r\n              </Header>\r\n              <OrderSummary\r\n                menu={props.location.state.menu}\r\n                toppings={props.location.state.order.chosenToppings}\r\n                price={props.location.state.order.totalPrice}\r\n              />\r\n              <Button color=\"red\" onClick={cancelHandler}>\r\n                Go Back\r\n              </Button>\r\n            </Segment>\r\n          </Grid.Column>\r\n\r\n          <Grid.Column width={10}>\r\n            <Segment color=\"red\">\r\n              <Header as=\"h2\" textAlign=\"center\" color=\"red\">\r\n                Enter your details:\r\n              </Header>\r\n              <Form id=\"form\">\r\n                <Form.Input\r\n                  error={messageState.name}\r\n                  required\r\n                  label=\"Name\"\r\n                  placeholder=\"Name\"\r\n                  id=\"form-input-name\"\r\n                  onChange={(event) =>\r\n                    formChangedHandler(event, \"form-input-name\", \"input\")\r\n                  }\r\n                />\r\n                <Form.Input\r\n                  error={messageState.phone}\r\n                  required\r\n                  label=\"Phone\"\r\n                  placeholder=\"Phone e.g. 086-1234567\"\r\n                  id=\"form-input-phone\"\r\n                  onChange={(event) =>\r\n                    formChangedHandler(event, \"form-input-phone\", \"input\")\r\n                  }\r\n                />\r\n                <Form.Field\r\n                  control={Select}\r\n                  required\r\n                  error={messageState.method}\r\n                  label=\"Delivery method\"\r\n                  options={[\r\n                    { key: \"c\", text: \"Collection\", value: \"collection\" },\r\n                    { key: \"d\", text: \"Delivery\", value: \"delivery\" },\r\n                  ]}\r\n                  placeholder=\"Collection or Delivery\"\r\n                  id=\"form-input-method\"\r\n                  onChange={(event) =>\r\n                    formChangedHandler(event, \"form-input-method\", \"select\")\r\n                  }\r\n                />\r\n                <Form.Input\r\n                  error={messageState.address}\r\n                  required={validationState.rules[3].required}\r\n                  fluid\r\n                  label=\"Address\"\r\n                  placeholder=\"Address\"\r\n                  id=\"form-input-address\"\r\n                  onChange={(event) =>\r\n                    formChangedHandler(event, \"form-input-address\", \"input\")\r\n                  }\r\n                />\r\n                <Button\r\n                  type=\"submit\"\r\n                  color=\"green\"\r\n                  disabled={disabled}\r\n                  onClick={checkoutHandler}\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </Form>\r\n            </Segment>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n  // DISPLAY ORDER SUMMARY AND FORM\r\n\r\n  return <React.Fragment>{orderForm}</React.Fragment>;\r\n};\r\n\r\nexport default withRouter(PlaceOrder);\r\n"],"sourceRoot":""}