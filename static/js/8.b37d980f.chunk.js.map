{"version":3,"sources":["containers/YourAccount/AccountUpdate/AccountUpdate.js"],"names":["AccountUpdate","props","auth","useContext","AuthContext","useState","user","history","location","state","accountState","setAccountState","error","errorMessage","errorState","setErrorState","rules","id","message","required","valid","formValid","validationState","setValidationState","name","email","address","messageState","setMessageState","validate","value","inputIdentifier","validation","inputRule","findIndex","input","trim","test","msgState","password","formIsValid","i","formChangedHandler","event","userDetails","target","trimmedPassword","disabled","updateForm","onClear","Row","centered","Column","width","color","as","textAlign","Input","autoComplete","label","placeholder","onChange","type","onClick","path","userId","axios","put","headers","Authorization","token","then","response","push","catch","errorMsg","data","Fragment"],"mappings":"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","file":"static/js/8.b37d980f.chunk.js","sourcesContent":["import React, { useState, useContext } from \"react\";\r\nimport { Grid, Form, Header, Segment, Button } from \"semantic-ui-react\";\r\nimport axios from \"../../../axios-orders\";\r\n\r\nimport ErrorModal from \"../../../components/Feedback/ErrorModal/ErrorModal\";\r\nimport AuthContext from \"../../../context/auth-context\";\r\n\r\nconst AccountUpdate = (props) => {\r\n\r\n  const auth = useContext(AuthContext);\r\n\r\n  const [accountState, setAccountState] = useState({\r\n    user: props.history.location.state.user,\r\n  });\r\n\r\n  const [errorState, setErrorState] = useState({\r\n    error: false,\r\n    errorMessage: null,\r\n  });\r\n\r\n  const [validationState, setValidationState] = useState({\r\n    rules: [\r\n      {\r\n        id: \"form-input-name\",\r\n        message:\r\n          \"Please enter your name (letters and spaces only, min length 2)\",\r\n        required: true,\r\n        valid: false,\r\n      },\r\n      {\r\n        id: \"form-input-email\",\r\n        message:\r\n          \"Please enter a valid email address (something@something.something)\",\r\n        required: true,\r\n        valid: false,\r\n      },\r\n      {\r\n        id: \"form-input-password\",\r\n        message:\r\n          \"Please enter a password (letters and numbers only, min length 6)\",\r\n        required: true,\r\n        valid: false,\r\n      },\r\n    ],\r\n    formValid: false,\r\n  });\r\n\r\n  const [messageState, setMessageState] = useState({\r\n    name: null,\r\n    email: null,\r\n    address: null,\r\n  });\r\n\r\n  const validate = (value, inputIdentifier) => {\r\n    // copy the validation state\r\n    const validation = { ...validationState };\r\n\r\n    // find the rule for this input\r\n    const inputRule = validation.rules.findIndex(\r\n      (input) => input.id === inputIdentifier\r\n    );\r\n\r\n    let message = null;\r\n\r\n    // check if it is required and also empty\r\n    if (validation.rules[inputRule].required && value.trim() === \"\") {\r\n      // get the error message and set valid to false\r\n      message = validation.rules[inputRule].message;\r\n      validation.rules[inputRule].valid = false;\r\n    } else if (inputIdentifier === \"form-input-email\") {\r\n      //check for a valid email\r\n\r\n      let pattern = /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/;\r\n      let validEmail = pattern.test(value);\r\n\r\n      if (validEmail) {\r\n        validation.rules[inputRule].valid = true;\r\n      } else {\r\n        validation.rules[inputRule].valid = false;\r\n        message = validation.rules[inputRule].message;\r\n      }\r\n    } else if (inputIdentifier === \"form-input-password\") {\r\n      //check for a valid password, letters and numbers only, 6 characters min\r\n\r\n      let pattern = /^[A-Za-z0-9\\s]{6,}$/;\r\n      let validPassword = pattern.test(value);\r\n\r\n      if (validPassword) {\r\n        validation.rules[inputRule].valid = true;\r\n      } else {\r\n        validation.rules[inputRule].valid = false;\r\n        message = validation.rules[inputRule].message;\r\n      }\r\n    } else if (\r\n      validation.rules[inputRule].required &&\r\n      inputIdentifier === \"form-input-name\"\r\n    ) {\r\n      //check for a valid name (letters and spaces only)\r\n\r\n      let pattern = /^[A-Za-z\\s]{2,30}$/;\r\n      let validName = pattern.test(value);\r\n\r\n      if (validName) {\r\n        validation.rules[inputRule].valid = true;\r\n      } else {\r\n        validation.rules[inputRule].valid = false;\r\n        message = validation.rules[inputRule].message;\r\n      }\r\n    } else {\r\n      // otherwise reset the message and set valid back to true\r\n      message = null;\r\n      validation.rules[inputRule].valid = true;\r\n    }\r\n\r\n    let msgState = { ...messageState };\r\n\r\n    switch (inputIdentifier) {\r\n      case \"form-input-name\":\r\n        msgState.name = message;\r\n        break;\r\n      case \"form-input-email\":\r\n        msgState.email = message;\r\n        break;\r\n      case \"form-input-password\":\r\n        msgState.password = message;\r\n        break;\r\n      default:\r\n      // code block\r\n    }\r\n\r\n    setMessageState({ ...msgState });\r\n\r\n    // check if the whole form is valid\r\n    let formIsValid = true;\r\n\r\n    for (let i in validation.rules) {\r\n      if (!validation.rules[i].valid) {\r\n        formIsValid = false;\r\n      }\r\n    }\r\n\r\n    // update state\r\n    setValidationState({ rules: validation.rules, formValid: formIsValid });\r\n  };\r\n\r\n  const formChangedHandler = (event, inputIdentifier) => {\r\n    let userDetails = accountState.user;\r\n\r\n    switch (inputIdentifier) {\r\n      case \"form-input-name\":\r\n        userDetails.name = event.target.value;\r\n        validate(event.target.value, inputIdentifier);\r\n        break;\r\n      case \"form-input-email\":\r\n        userDetails.email = event.target.value;\r\n        validate(event.target.value, inputIdentifier);\r\n        break;\r\n      case \"form-input-password\":\r\n        let password = event.target.value;\r\n        let trimmedPassword = password.trim();\r\n        userDetails.password = trimmedPassword;\r\n        validate(trimmedPassword, inputIdentifier);\r\n        break;\r\n      default:\r\n      // code block\r\n    }\r\n\r\n    setAccountState({ user: userDetails });\r\n  };\r\n\r\n  const updateHandler = () => {\r\n    let uid = auth.userId;\r\n    let path = \"/updateuser/\" + uid;\r\n    axios\r\n      .put(path, accountState.user, {\r\n        headers: { Authorization: \"Bearer \" + auth.token },\r\n      })\r\n      .then((response) => {\r\n        props.history.push(\"/users/\" + auth.userId);\r\n      })\r\n      .catch((error) => {\r\n        let errorMsg = \"\";\r\n        if (error.response) {\r\n          errorMsg = error.response.data.message;\r\n        } else {\r\n          errorMsg = \"There was a problem updating your account\";\r\n        }\r\n        setErrorState({ error: true, errorMessage: errorMsg });\r\n      });\r\n  };\r\n\r\n  let disabled = !validationState.formValid;\r\n\r\n  const errorHandler = () => {\r\n    setErrorState({\r\n      error: false,\r\n      errorMessage: null,\r\n    });\r\n  };\r\n\r\n  let updateForm = null;\r\n\r\n  if (errorState.error) {\r\n    updateForm = (\r\n      <ErrorModal error={errorState.errorMessage} onClear={errorHandler} />\r\n    );\r\n  } else {\r\n    updateForm = (\r\n      <Grid>\r\n        <Grid.Row centered>\r\n          <Grid.Column width={10}>\r\n            <Segment color=\"red\">\r\n              <Header as=\"h2\" textAlign=\"center\" color=\"red\">\r\n                Update Your Details\r\n              </Header>\r\n              <Form id=\"form\">\r\n                <Form.Input\r\n                  error={messageState.email}\r\n                  autoComplete=\"off\"\r\n                  required\r\n                  label=\"Email\"\r\n                  placeholder=\"Email e.g. username@mail.com\"\r\n                  id=\"form-input-email\"\r\n                  onChange={(event) =>\r\n                    formChangedHandler(event, \"form-input-email\")\r\n                  }\r\n                />\r\n                <Form.Input\r\n                  error={messageState.password}\r\n                  type=\"password\"\r\n                  autoComplete=\"off\"\r\n                  required\r\n                  label=\"Password\"\r\n                  placeholder=\"Password\"\r\n                  id=\"form-input-password\"\r\n                  onChange={(event) =>\r\n                    formChangedHandler(event, \"form-input-password\")\r\n                  }\r\n                />\r\n                <Form.Input\r\n                  error={messageState.name}\r\n                  autoComplete=\"off\"\r\n                  required\r\n                  label=\"Name\"\r\n                  placeholder=\"Name\"\r\n                  id=\"form-input-name\"\r\n                  onChange={(event) =>\r\n                    formChangedHandler(event, \"form-input-name\")\r\n                  }\r\n                />\r\n                <Button\r\n                  type=\"submit\"\r\n                  color=\"green\"\r\n                  disabled={disabled}\r\n                  onClick={updateHandler}\r\n                >\r\n                  Update Details\r\n                </Button>\r\n              </Form>\r\n            </Segment>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n  return <React.Fragment>{updateForm}</React.Fragment>;\r\n};\r\n\r\nexport default AccountUpdate;\r\n"],"sourceRoot":""}